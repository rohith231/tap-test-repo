module.exports = (sequelize, DataTypes) => {
  const deviationVulnerability = sequelize.define('DeviationVulnerability', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV1,
      primaryKey: true,
      //autoIncrement: true
    },
    group_title: {
      type: DataTypes.STRING,
    },
    vuln_num: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    rule_id: {
      type: DataTypes.STRING,
    },
    rule_ver: {
      type: DataTypes.STRING,
    },
    severity: {
      type: DataTypes.STRING,
    },
    status: {
      type: DataTypes.STRING,
    },
    finding_details: {
      type: DataTypes.TEXT,
    },
    comments: {
      type: DataTypes.TEXT,
    },
    target_key: {
      type: DataTypes.INTEGER,
    },
    cci_ref: {
      type: DataTypes.STRING,
    },
    rule_title: {
      type: DataTypes.TEXT,
    },
    vuln_discuss: {
      type: DataTypes.TEXT,
    },
    ia_controls: {
      type: DataTypes.STRING,
    },
    check_content: {
      type: DataTypes.TEXT,
    },
    fix_text: {
      type: DataTypes.TEXT,
    },
    false_positives: {
      type: DataTypes.STRING,
    },
    false_nigatives: {
      type: DataTypes.STRING,
    },
    documentable: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    mitigations: {
      type: DataTypes.STRING,
    },
    potential_impact: {
      type: DataTypes.STRING,
    },
    third_party_tools: {
      type: DataTypes.STRING,
    },
    mitigation_control: {
      type: DataTypes.STRING,
    },
    responsibility: {
      type: DataTypes.STRING,
    },
    security_override_guidance: {
      type: DataTypes.STRING,
    },
    check_content_ref: {
      type: DataTypes.STRING,
    },
    class: {
      type: DataTypes.STRING,
    },
    stig_ref: {
      type: DataTypes.STRING,
    },
    severity_override: {
      type: DataTypes.STRING,
    },
    severity_justification: {
      type: DataTypes.STRING,
    },
    user_id: {
      type: DataTypes.UUID,
      references: {
        model: {
          tableName: 'users'
        },
        key: 'id'
      },
      allowNull: false
    },
    deviation_id: {
      type: DataTypes.UUID,
      references: {
        model: {
          tableName: 'deviations'
        },
        key: 'id'
      },
      allowNull: false
    },
    createdAt: DataTypes.DATE,
    updatedAt: DataTypes.DATE,
    deletedAt: DataTypes.DATE,
    attrsToSkip: {
      type: DataTypes.VIRTUAL,
      get() {
        return ['id', 'createdAt', 'updatedAt', 'deletedAt', 'user_id', 'deviation_id', 'attrsToSkip'];
      },
    }
  }, {
    timestamps: true,
    paranoid: true,
    tableName: 'deviations_vulnerabilities'
  });

  deviationVulnerability.associate = (models) => {
    deviationVulnerability.belongsTo(models.Deviation, {
      foreignKey: 'deviation_id',
      constraints: false
    })
    deviationVulnerability.hasOne(models.DeviationCommand, {
      foreignKey: 'deviation_vulnerability_id',
      as: 'commands',
      constraints: false
    })
  }

  deviationVulnerability.addHook('beforeBulkDestroy', (options) => {
    if (options.where.id) {
      // const models = require("./index");
      // models.DeviationCommand.destroy({
      //   where: {
      //     deviation_vulnerability_id: options.where.id
      //   },
      //   force: true
      // });
    }
    return options;
  });
  return deviationVulnerability;
};
